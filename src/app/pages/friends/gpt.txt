friends component html:

<section class="wp justify-content-center">
  <section>
    <h2 class="mt-5 mb-5 text-left">Mis Amigos</h2>
  </section>
  <ul *ngIf="members.length > 0; else noFriends">
    <li *ngFor="let friend of members">
      <app-friend-card [title]="friend.name"></app-friend-card>
    </li>
  </ul>
  <ng-template #noFriends>
    <p>No members found.</p>
  </ng-template>
</section>


friends component ts:
  import { Component, inject } from '@angular/core';
    import { CommonModule, NgFor } from '@angular/common';
    import { UsersService } from '../../services/users.service';
    import { ActivatedRoute } from '@angular/router';
import { FriendCardComponent} from '../../components/friend-card/friend-card.component';
import { IMember } from '../../interfaces/imember';
    
    @Component({
      selector: 'app-friends',
      standalone: true,
      imports: [FriendCardComponent,  CommonModule],
      templateUrl: './friends.component.html',
      styleUrl: './friends.component.css'
    })
    export class FriendsComponent {
      memberService = inject(UsersService);
    
    
      members: IMember[]= [];
      userId: string = '11';
   
    
      ngOnInit(): void {
        this.loadMembers();
      }
    
      loadMembers(): void {
        this.memberService.getMembersOfSharedGroups(this.userId).then(members => {
          this.members = members;
          console.log('Members sharing groups with user:', members);
          this.memberService.setMembers(members)
        });
    
      }

 }


 friend-card component html:
 <section class="box img-bg-gif container border border-2 rounded-4 align-items-center px-4 py-4 mt-3">
  <div class="d-flex pt-1 w-100 align-items-center">
    <img src="https://placehold.co/400" class="rounded d-block" alt="">
    <h3 class="px-3 fw-bold mb-0">{{ title }}</h3>
    <a href="#" class="ms-auto"><i class="fa-solid fa-ellipsis-vertical" style="color: #027184;"></i></a>
  </div>

  <div class="accordion accordion-flush mt-3" id="accordionFlushExample">
    <div class="accordion-item">
      <h2 class="accordion-header">
        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                data-bs-target="#collapseMembers" aria-expanded="false">RESUMEN
        </button>
      </h2>
      <div id="collapseMembers" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
        <div class="accordion-body">
          <div *ngFor="let userId of userIds">
            <h3>{{ userId }}</h3>
            <ul>
              <li *ngFor="let payment of userPayments[userId]">
                {{ payment.description }} - {{ payment.amount }}
              </li>
            </ul>
          </div>
          
        </div>
      </div>
    </div>
  </div>
</section>


friend-card component ts:

import { Component, Input, OnInit } from '@angular/core';
import { UsersService } from '../../services/users.service'
import { IMember } from '../../interfaces/imember';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-friend-card',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './friend-card.component.html',
  styleUrls: ['./friend-card.component.css']
})
export class FriendCardComponent implements OnInit {
  @Input() title: string = '';
  

  userIds: string[] = [];
  members: IMember[] = [];
  selectedMember: any;
  selectedUserId: string | null = null;

  // Objeto para almacenar los pagos por cada usuario
  userPayments: { [userId: string]: any[] } = {};

  constructor(private usersService: UsersService) {}

  ngOnInit(): void {
    this.members = this.usersService.getMembers();
    this.userIds = this.members.map(member => member.id.toString());

    // Inicializar userPayments para cada userId
    this.userIds.forEach(userId => {
      this.userPayments[userId] = []; // Inicializamos el array de pagos vacío
      this.loadUserPayments(userId); // Cargamos los pagos para cada userId
    });
    console.log(this.userPayments)
  }

  loadUserPayments(userId: string): void {
    this.usersService.getUserPayments(userId)
      .then(payments => {
        // Actualizamos userPayments con los pagos obtenidos para este userId
        this.userPayments[userId] = payments;
      })
      .catch(error => {
        console.error('Error fetching user payments for userId:', userId, error);
      });
  }

  selectUser(userId: string): void {
    this.selectedUserId = userId;
    this.loadUserPayments(userId);
  }
 
}


services.ts :

import { Injectable, inject } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { BehaviorSubject, lastValueFrom, map, Observable } from 'rxjs';
import { IUser } from '../interfaces/iuser.interfaces';
import { environment } from '../../environments/environment.development';
import { IMember } from '../interfaces/imember';

type RegisterBody = {
  name: string;
  username: string;
  phone: number;
  email: string;
  password: string;
};

type LoginBody = {
  email: string;
  password: string;
};

type LoginResponse = {
  error?: string;
  message?: string;
  token?: string;
};

@Injectable({
  providedIn: 'root',
})
export class UsersService {

  private httpClient = inject(HttpClient);
  private baseUrl: string = `${environment.apiUrl}/users`;
  private profileUrl = `${this.baseUrl}/profile`;
  private loggedIn = new BehaviorSubject<boolean>(this.hasToken());
  

  // autenticacion usuario

  register(newUser: RegisterBody): Promise<IUser & string[]> {
    return lastValueFrom(
      this.httpClient.post<IUser & string[]>(
        `${this.baseUrl}/register`,
        newUser
      )
    );
  }

  login(body: LoginBody): Promise<LoginResponse> {
    return lastValueFrom(
      this.httpClient.post<LoginResponse>(`${this.baseUrl}/login`, body)
    ).then(response => {
      if (response.token) {
        localStorage.setItem('token', response.token);
        this.loggedIn.next(true);  // Notifica a los suscriptores que el usuario ha iniciado sesión
      }
      return response;
    });
  }

   logout(): void {
    localStorage.removeItem('token');
     this.loggedIn.next(false);  
  }
    //permite actualizar la UI inmediatamente cuando el usuario cierra o inicia sesión
    get isLoggedIn(): Observable<boolean> {
    return this.loggedIn.asObservable();
  }

  private hasToken(): boolean {
    return !!localStorage.getItem('token');  // Verifica si el token está presente en el localStorage
  }

  
  
  // funcionalidades de los usuarios

  getProfile(): Promise<IUser> {
    return lastValueFrom(
      this.httpClient.get<IUser>(this.profileUrl));
  }

  //Actualizar profile usuario????FALTA
  updateProfile(formValue: IUser): Promise<IUser> {
    return lastValueFrom(
      this.httpClient.put<IUser>(`${this.profileUrl}/${formValue._id}/update`, formValue));
  }

  //SUBIR IMAGEN USUARIO???FALTA
  uploadUserImage(userId: number, image: File) {
    const formData = new FormData();
    formData.append('image', image);

    return this.httpClient.post(
      `${this.baseUrl}/${userId}/upload-image`,
      formData
    );
  }

  
  deleteUser(id: number): Promise<IUser> {
     return lastValueFrom(
       this.httpClient.delete<IUser>(`${this.profileUrl}/delete/${id}`)
     );
  }



  private membersUrl = `${environment.apiUrl}/members`;
  // Obtener miembros de un grupo
  getMembersByGroupId(groupId:string): Observable<any>{
    const url = `${this.membersUrl}/${groupId}`;
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${localStorage.getItem('token')}`
    });
    return this.httpClient.get<any>(url, {headers});
  }

     // Obtener grupos del usuario
    getUserGroups(userId: string): Promise<any> {
    const url = `${environment.apiUrl}/groups/${userId}`;
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${localStorage.getItem('token')}`
    });
    return lastValueFrom(this.httpClient.get<any>(url, { headers }));
  }


  // Obtener miembros que comparten grupos con el usuario
  async getMembersOfSharedGroups(userId: string): Promise<any[]> {
    const groups = await this.getUserGroups(userId);
    const members = await Promise.all(groups.map(async (group: any) => lastValueFrom(this.getMembersByGroupId(group.id))));
   const uniqueMembers = members.flat().filter((member, index, self) =>
    index === self.findIndex((m) => m.id === member.id)
  );
  return uniqueMembers;
}


getUserPayments(userId: string): Promise<any> {
  const url = `${environment.apiUrl}/payments/user/${userId}/participated`;
  const headers = new HttpHeaders({
    'Authorization': `Bearer ${localStorage.getItem('token')}`
  });
  return lastValueFrom(this.httpClient.get<any>(url, { headers }));
}


getMemberIds(userId: string): Promise<number[]> {
  const url = `${environment.apiUrl}/members/${userId}/known`;
  const headers = new HttpHeaders({
    'Authorization': `Bearer ${localStorage.getItem('token')}`
  });
  return lastValueFrom(
    this.httpClient.get<any[]>(url, { headers }).pipe(
      map(members => members.map(member => member.id))
    )
  );
  }

  private membersData: IMember[] = [];
  setMembers(members: IMember[]): void {
    this.membersData = members;
  }

  getMembers(): IMember[] {
    return this.membersData;
  }


}